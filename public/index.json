[
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Giới thiệu",
	"tags": [],
	"description": "",
	"content": "Sơ đồ tổng quan luồng hoạt động Tổng quát về dự án Feature Flag Management Dự án Feature Flag Management hướng tới việc xây dựng một hệ thống quản lý và kiểm soát việc phát hành các tính năng mới (feature flags) cho ứng dụng một cách an toàn, linh hoạt và tự động trên nền tảng AWS. Việc sử dụng feature flag giúp đội ngũ phát triển có thể bật/tắt, thử nghiệm, hoặc rollback các tính năng mà không cần triển khai lại toàn bộ ứng dụng, từ đó giảm thiểu rủi ro và tăng tốc độ đổi mới.\nHệ thống được thiết kế theo từng bước rõ ràng, tận dụng các dịch vụ chủ lực của AWS để đảm bảo tính tự động hóa, giám sát, an toàn và dễ dàng mở rộng. Dưới đây là các dịch vụ và bước thực hiện chính trong dự án:\n1. Giới thiệu Cung cấp tổng quan về mục tiêu, lợi ích của việc quản lý feature flag và lý do lựa chọn AWS làm nền tảng triển khai.\n2. Chuẩn bị Hướng dẫn chuẩn bị từng bước triển khai hệ thống quản lý feature flag trên AWS, từ khởi tạo tài nguyên đến cấu hình tự động hóa và giám sát.\n3. AWS AppConfig Sử dụng AWS AppConfig để quản lý, triển khai và kiểm soát các feature flag một cách tập trung và an toàn. Bao gồm các bước:\nTạo Application: Khởi tạo ứng dụng quản lý cấu hình. Tạo Environment: Xây dựng môi trường triển khai (dev, test, prod\u0026hellip;). Tạo Configuration: Định nghĩa và lưu trữ các feature flag. Tạo Deployment Strategy: Thiết lập chiến lược rollout (triển khai dần, canary, linear\u0026hellip;) để giảm thiểu rủi ro khi phát hành tính năng mới. 4. EventBridge Rule Thiết lập AWS EventBridge Rule để tự động phát hiện các sự kiện quan trọng (như lỗi, thay đổi trạng thái) và kích hoạt các quy trình xử lý tiếp theo, đảm bảo hệ thống luôn phản ứng kịp thời với các tình huống phát sinh.\n5. Lambda Sử dụng AWS Lambda để tự động hóa các tác vụ như rollback khi phát hiện sự cố:\nTạo Lambda Function cho Automated Rollback: Tự động khôi phục trạng thái an toàn khi có lỗi. Tạo Trigger cho Lambda Rollback: Kết nối Lambda với các sự kiện/alarms để tự động kích hoạt rollback. 6. AWS CloudWatch Tận dụng Amazon CloudWatch để giám sát, cảnh báo và trực quan hóa hoạt động của hệ thống:\nTạo CloudWatch Alarm: Thiết lập cảnh báo khi có dấu hiệu bất thường. Tạo CloudWatch Dashboard: Xây dựng bảng điều khiển trực quan để theo dõi các chỉ số quan trọng. 7. Dọn dẹp tài nguyên Hướng dẫn cách xóa hoặc dọn dẹp các tài nguyên AWS sau khi hoàn thành thử nghiệm hoặc triển khai, giúp tối ưu chi phí và đảm bảo môi trường sạch sẽ.\nMục tiêu Dự án này giúp bạn từng bước xây dựng một hệ thống quản lý feature flag hiện đại, tự động hóa và an toàn trên AWS. Việc kết hợp các dịch vụ như AppConfig, EventBridge, Lambda và CloudWatch không chỉ giúp kiểm soát việc phát hành tính năng mà còn đảm bảo hệ thống luôn được giám sát, phản ứng nhanh với sự cố và dễ dàng mở rộng trong tương lai.\n"
},
{
	"uri": "//localhost:1313/2-implementation-steps/1-install-necessary-tools/",
	"title": "Cài đặt các công cụ cần thiết",
	"tags": [],
	"description": "",
	"content": "Kiến trúc tổng quan của project Project sử dụng kiến trúc phân tầng:\nTầng Cấu hình: AWS AppConfig để quản lý và triển khai feature flag, cấu hình động cho ứng dụng. Tầng Thực thi: AWS Lambda functions thực hiện các tác vụ cụ thể Tầng Monitoring: CloudWatch cho logging và monitoring Tầng Thông báo: SNS/Email/Slack cho notifications Cài đặt công cụ phát triển Để chuẩn bị môi trường phát triển trên máy local, chúng ta cần cài đặt một số công cụ sau:\nAWS CLI: Giao diện dòng lệnh AWS để tương tác với các dịch vụ AWS Node.js và npm: Để phát triển serverless functions bằng JavaScript Git: Để quản lý mã nguồn IDE hoặc text editor: Visual Studio Code, IntelliJ, hoặc bất kỳ IDE nào bạn quen thuộc Cài đặt AWS CLI AWS CLI là công cụ dòng lệnh giúp bạn tương tác với các dịch vụ AWS thông qua các lệnh trong terminal.\nCài đặt trên Windows:\n# Sử dụng MSI installer # Tải xuống từ https://aws.amazon.com/cli/ Kiểm tra cài đặt:\naws --version Cài đặt Node.js và npm Cài đặt trên Windows/macOS/Linux:\nTải và cài đặt từ nodejs.org\nKiểm tra cài đặt:\nnode --version npm --version Cài đặt Git Cài đặt trên Windows:\nTải và cài đặt từ git-scm.com\nKiểm tra cài đặt:\ngit --version Kết luận Sau khi hoàn thành các bước trên, bạn đã có một môi trường phát triển local với các công cụ cần thiết để làm việc với AWS. Trong phần tiếp theo, chúng ta sẽ cấu hình AWS CLI để kết nối với tài khoản AWS của bạn.\n"
},
{
	"uri": "//localhost:1313/3-configure-appconfig/1-create-application/",
	"title": "Tạo Application",
	"tags": [],
	"description": "",
	"content": " Đăng nhập vào AWS Console -\u0026gt; Search AppConfig -\u0026gt; Click AWS AppConfig. Click Create application. Điền thông tin: Application name: MyFeatureFlagApp Description: Feature flag management for my project (có thể để trống) Click Create application "
},
{
	"uri": "//localhost:1313/6-configure-cloudwatch/1-create-cloudwatch-alarm/",
	"title": "Tạo CloudWatch Alarm",
	"tags": [],
	"description": "",
	"content": "Hướng dẫn Thiết lập CloudWatch Alarm ℹ️ Information: CloudWatch Alarm giúp bạn giám sát các chỉ số (metrics) và tự động gửi cảnh báo khi vượt ngưỡng. Dưới đây là các bước tạo một CloudWatch Alarm cơ bản:\nBước 1: Truy cập Amazon CloudWatch Đăng nhập AWS Console Vào dịch vụ CloudWatch Bước 2: Chọn mục Alarms Chọn Alarms \u0026gt; All alarms ở menu bên trái Nhấn Create alarm Bước 3: Chọn chỉ số cần giám sát Chọn Select metric Chọn metric phù hợp Usage \u0026gt; By AWS Resource (ví dụ: error rate, latency, hoặc bất kỳ metric nào bạn muốn giám sát để rollback). Nhấn Select metric Bước 4: Đặt điều kiện cảnh báo Metric: Metric name: CallCount Type: API Resource: GetHostedConfigurationVersion Service: AWS AppConfig Statistic: Sum Period: 5 minutes Conditions: Threshold type: Static Whenever CallCount is: Greater than: 10 Additional configuration: Datapoints to alarm: 1 out of 1 Missing data treatment: Treat missing data as missing Click \u0026ldquo;Next\u0026rdquo; để tiếp tục Bước 5: Thiết lập hành động khi cảnh báo Chọn gửi thông báo qua SNS topic hoặc email\nAlarm state trigger: In alarm SNS option: Create new topic Topic name: Default_CloudWatch_Alarms_Topic Email: Your_email (Nhập email muốn nhập cảnh báo) Có thể chọn tự động thực hiện hành động (stop, terminate instance\u0026hellip;) Ở phần Actions, chọn Add Lambda action\nAlarm state trigger: In alarm Function Type: Select Lambda Function from the signed in account Choose a function: feature-flag-rollback (đã tạo trước đó) Bước 6: Đặt tên và tạo alarm Đặt tên cho alarm: AppConfig-GetHostedConfig-HighCallCount Kiểm tra lại thông tin và nhấn Create alarm Lưu ý: Bạn có thể tạo nhiều alarm cho nhiều chỉ số khác nhau để giám sát toàn diện hệ thống.\nKết quả Bước 7:Xác nhận Email Đăng nhập vào Email bạn đã dùng để thiết lập cảnh báo trước đó. Bạn sẽ thấy một email được gửi tới từ AWS Notification. Ấn chọn Confirm subscription. 🔒 Security Note: Việc xác nhận đăng ký SNS không chỉ kích hoạt thông báo mà còn là một biện pháp bảo mật, đảm bảo rằng chỉ những người dùng được ủy quyền mới nhận được thông báo về trạng thái hệ thống.\n"
},
{
	"uri": "//localhost:1313/5-configure-lambda/1-create-lambda-function-for-automated-rollback/",
	"title": "Tạo Lambda Function cho Automated Rollback",
	"tags": [],
	"description": "",
	"content": "Tại sao phải tạo Trigger và Lambda Function cho Automated Rollback? Việc tạo Trigger và Lambda Function cho Automated Rollback giúp hệ thống tự động phát hiện lỗi và khôi phục về trạng thái an toàn trước đó mà không cần can thiệp thủ công. Điều này đảm bảo ứng dụng luôn ổn định, giảm thiểu rủi ro và thời gian gián đoạn dịch vụ.\nBước 1: Truy cập AWS Lambda Đăng nhập AWS Console Vào dịch vụ Lambda Bước 2: Chọn mục Functions Chọn Functions ở menu bên trái Nhấn Create function Điền thông tin: Chọn Author from scratch Function name: feature-flag-rollback Runtime: Node.js 22.x Architecture: x86_64 Click \u0026ldquo;Create function\u0026rdquo; Bước 3: Deloy code Copy code từ aws-config/lambda/rollback-function.js. Click Deploy để lưu code. { const { AppConfigClient, StartConfigurationSessionCommand, GetConfigurationCommand, CreateHostedConfigurationVersionCommand, StartDeploymentCommand, } = require(\u0026#34;@aws-sdk/client-appconfig\u0026#34;); const { CloudWatchClient, PutMetricDataCommand, } = require(\u0026#34;@aws-sdk/client-cloudwatch\u0026#34;); const { SNSClient, PublishCommand } = require(\u0026#34;@aws-sdk/client-sns\u0026#34;); // Khởi tạo client const appConfig = new AppConfigClient({ region: process.env.AWS_REGION }); const cloudWatch = new CloudWatchClient({ region: process.env.AWS_REGION }); const sns = new SNSClient({ region: process.env.AWS_REGION }); /** * Lambda function for automated feature flag rollback */ exports.handler = async (event) =\u0026gt; { console.log(\u0026#34;Received event:\u0026#34;, JSON.stringify(event, null, 2)); try { // Parse CloudWatch alarm event const message = JSON.parse(event.Records[0].Sns.Message); const alarmName = message.AlarmName; const alarmState = message.NewStateValue; const alarmReason = message.NewStateReason; // Extract feature flag name from alarm name const featureFlagName = extractFeatureFlagName(alarmName); if (!featureFlagName) { console.error( \u0026#34;Could not extract feature flag name from alarm:\u0026#34;, alarmName ); return { statusCode: 400, body: JSON.stringify({ error: \u0026#34;Invalid alarm name format\u0026#34;, }), }; } console.log(`Processing alarm for feature flag: ${featureFlagName}`); console.log(`Alarm state: ${alarmState}`); // Only process ALARM state (not OK or INSUFFICIENT_DATA) if (alarmState !== \u0026#34;ALARM\u0026#34;) { console.log(\u0026#34;Alarm state is not ALARM, skipping rollback\u0026#34;); return { statusCode: 200, body: JSON.stringify({ message: \u0026#34;Alarm state is not ALARM, no action taken\u0026#34;, }), }; } // Get current feature flag configuration const currentConfig = await getFeatureFlagConfiguration(); if ( !currentConfig || !currentConfig.flags || !currentConfig.flags[featureFlagName] ) { console.error( `Feature flag ${featureFlagName} not found in configuration` ); return { statusCode: 404, body: JSON.stringify({ error: \u0026#34;Feature flag not found\u0026#34;, }), }; } // Perform rollback await rollbackFeatureFlag(featureFlagName, currentConfig); // Send notification await sendRollbackNotification(featureFlagName, alarmReason); // Log rollback metrics await logRollbackMetrics(featureFlagName); return { statusCode: 200, body: JSON.stringify({ message: `Successfully rolled back feature flag: ${featureFlagName}`, timestamp: new Date().toISOString(), }), }; } catch (error) { console.error(\u0026#34;Error in rollback function:\u0026#34;, error); // Send error notification await sendErrorNotification(error.message); return { statusCode: 500, body: JSON.stringify({ error: \u0026#34;Rollback failed\u0026#34;, message: error.message, }), }; } }; /** * Extract feature flag name from alarm name */ function extractFeatureFlagName(alarmName) { // Expected format: FeatureFlag-{flagName}-ErrorRate const match = alarmName.match(/^FeatureFlag-(.+)-ErrorRate$/); return match ? match[1] : null; } /** * Get current feature flag configuration from AppConfig */ async function getFeatureFlagConfiguration() { try { const params = { ApplicationIdentifier: process.env.APPCONFIG_APPLICATION, EnvironmentIdentifier: process.env.APPCONFIG_ENVIRONMENT, ConfigurationProfileIdentifier: process.env.APPCONFIG_PROFILE, ClientId: `rollback-lambda-${Date.now()}`, }; const session = await appConfig .startConfigurationSession(params) .promise(); const configParams = { ConfigurationToken: session.InitialConfigurationToken, }; const result = await appConfig.getConfiguration(configParams).promise(); if (result.Configuration) { return JSON.parse(result.Configuration.toString()); } return null; } catch (error) { console.error(\u0026#34;Error getting feature flag configuration:\u0026#34;, error); throw error; } } /** * Rollback feature flag by disabling it */ async function rollbackFeatureFlag(flagName, currentConfig) { try { // Disable the feature flag currentConfig.flags[flagName].enabled = false; currentConfig.flags[flagName].rolloutPercentage = 0; currentConfig.flags[flagName].metadata.lastRollback = new Date().toISOString(); currentConfig.flags[flagName].metadata.rollbackReason = \u0026#34;Automated rollback due to alarm\u0026#34;; // Update version currentConfig.version = generateVersion(); currentConfig.lastUpdated = new Date().toISOString(); // Create new configuration version const createParams = { ApplicationId: process.env.APPCONFIG_APPLICATION, ConfigurationProfileId: process.env.APPCONFIG_PROFILE, Content: JSON.stringify(currentConfig), ContentType: \u0026#34;application/json\u0026#34;, Description: `Automated rollback of ${flagName} due to alarm`, }; const versionResult = await appConfig .createHostedConfigurationVersion(createParams) .promise(); // Start immediate deployment const deployParams = { ApplicationId: process.env.APPCONFIG_APPLICATION, EnvironmentId: process.env.APPCONFIG_ENVIRONMENT, ConfigurationProfileId: process.env.APPCONFIG_PROFILE, ConfigurationVersion: versionResult.VersionNumber.toString(), DeploymentStrategyId: \u0026#34;AppConfig.AllAtOnce\u0026#34;, Description: `Emergency rollback of ${flagName}`, }; await appConfig.startDeployment(deployParams).promise(); console.log(`Successfully rolled back feature flag: ${flagName}`); } catch (error) { console.error(\u0026#34;Error rolling back feature flag:\u0026#34;, error); throw error; } } /** * Send rollback notification */ async function sendRollbackNotification(flagName, reason) { try { const message = { subject: `🚨 Feature Flag Rollback: ${flagName}`, message: `Feature flag \u0026#34;${flagName}\u0026#34; has been automatically rolled back due to alarm.\\n\\nReason: ${reason}\\n\\nTime: ${new Date().toISOString()}\\n\\nPlease investigate and take appropriate action.`, flagName: flagName, timestamp: new Date().toISOString(), action: \u0026#34;rollback\u0026#34;, }; const params = { TopicArn: process.env.SNS_TOPIC_ARN, Message: JSON.stringify(message), Subject: message.subject, }; await sns.publish(params).promise(); console.log(\u0026#34;Rollback notification sent\u0026#34;); } catch (error) { console.error(\u0026#34;Error sending rollback notification:\u0026#34;, error); } } /** * Send error notification */ async function sendErrorNotification(errorMessage) { try { const message = { subject: \u0026#34;❌ Feature Flag Rollback Failed\u0026#34;, message: `Automated rollback failed with error: ${errorMessage}\\n\\nTime: ${new Date().toISOString()}\\n\\nPlease investigate immediately.`, timestamp: new Date().toISOString(), action: \u0026#34;rollback_failed\u0026#34;, }; const params = { TopicArn: process.env.SNS_TOPIC_ARN, Message: JSON.stringify(message), Subject: message.subject, }; await sns.publish(params).promise(); } catch (error) { console.error(\u0026#34;Error sending error notification:\u0026#34;, error); } } /** * Log rollback metrics to CloudWatch */ async function logRollbackMetrics(flagName) { try { const params = { Namespace: \u0026#34;FeatureFlags\u0026#34;, MetricData: [ { MetricName: \u0026#34;AutomatedRollback\u0026#34;, Value: 1, Unit: \u0026#34;Count\u0026#34;, Timestamp: new Date(), Dimensions: [ { Name: \u0026#34;FeatureFlagName\u0026#34;, Value: flagName, }, ], }, ], }; await cloudWatch.putMetricData(params).promise(); console.log(\u0026#34;Rollback metrics logged\u0026#34;); } catch (error) { console.error(\u0026#34;Error logging rollback metrics:\u0026#34;, error); } } /** * Generate version string */ function generateVersion() { const now = new Date(); return `${now.getFullYear()}.${ now.getMonth() + 1 }.${now.getDate()}.${now.getHours()}${now.getMinutes()}`; } } "
},
{
	"uri": "//localhost:1313/6-configure-cloudwatch/2-create-cloudwatch-dashboard/",
	"title": "Tạo CloudWatch Dashboard",
	"tags": [],
	"description": "",
	"content": "Tạo CloudWatch Dashboard ℹ️ Information: Amazon CloudWatch Dashboards là công cụ trực quan hóa mạnh mẽ cho phép bạn tạo các bảng điều khiển tùy chỉnh để giám sát tài nguyên AWS trong thời gian thực. Dashboards giúp tập hợp các metrics, logs và alarms quan trọng vào một nơi duy nhất, tạo điều kiện thuận lợi cho việc giám sát và phân tích hệ thống. Dưới đây là các bước tạo dashboard:\nBước 1: Truy cập Amazon CloudWatch Đăng nhập AWS Console Vào dịch vụ CloudWatch Bước 2: Chọn mục Dashboards Chọn Dashboards ở menu bên trái Nhấn Create dashboard Bước 3: Đặt tên cho dashboard Nhập tên dashboard (ví dụ: FeatureFlags-Monitoring) và nhấn Create dashboard Bước 4: Thêm widget vào dashboard Chọn loại widget (Line, Stacked area, Number, Text\u0026hellip;) Chọn Configure để chọn chỉ số hoặc log muốn hiển thị Tùy chỉnh giao diện, thời gian, màu sắc\u0026hellip; Widget 1 - API Latency Monitor: Click Add widget \u0026gt; Chọn Metrics \u0026gt; Line Tìm và chọn các metrics: Usage \u0026gt; By AWS Resource AWS AppConfig - GetHostedConfigurationVersion AWS AppConfig - GetConfigurationProfile AWS AppConfig - ListHostedConfigurationVersions Graphed metrics: Title: API Response Time Period: 5 minutes Statistic: Average Click Create widget Widget 2 - Deployment Monitoring: Click Add widget \u0026gt; Chọn Metrics \u0026gt; Line Tìm và chọn các metrics: Usage \u0026gt; By AWS Resource AWS AppConfig - StartDeployment AWS AppConfig - StopDeployment AWS AppConfig - GetDeployment Graphed metrics: Title: Deployment Monitoring Period: 1 minute Statistic: Sum Click Create widge Widget 3 - Resource Count: Click Add widget \u0026gt; Chọn Metrics \u0026gt; Number Tìm và chọn các metrics: Usage \u0026gt; By AWS Resource AWS AppConfig - Application AWS AppConfig - DeploymentStrategy Graphed metrics: Title: Resource Count Period: 5 minutes Statistic: Average Click Create widge Widget 4 - Configuration Changes: Click Add widget \u0026gt; Chọn Metrics \u0026gt; Line Tìm và chọn các metrics: Usage \u0026gt; By AWS Resource AWS AppConfig - CreateHostedConfigurationVersion AWS AppConfig - UpdateApplication Graphed metrics: Title: Configuration Changes Period: 1 minute Statistic: Sum Click Create widge Widget 5 - RollbackTriggered: Click Add widget \u0026gt; Chọn Metrics \u0026gt; Number Tìm và chọn các metrics: Lambda \u0026gt; By Function Name feature-flag-rollback - Invocations feature-flag-rollback - Errors feature-flag-rollback - Duration Graphed metrics: Period: 5 minute Statistic: Average Click Create widge Bước 5: Lưu dashboard Nhấn Save dashboard để hoàn tất Lưu ý: Bạn có thể thêm nhiều widget để giám sát nhiều dịch vụ và chỉ số khác nhau trên cùng một dashboard.\n"
},
{
	"uri": "//localhost:1313/5-configure-lambda/2-configure-environment-variables/",
	"title": "Cấu hình Environment variables",
	"tags": [],
	"description": "",
	"content": " Chọn Configuration Click tab Environment variables Click Edit Add các biến: Key: APP_ID | Value: [ID của AppConfig application của bạn] Key: ENV_ID | Value: [ID của environment production] Key: PROFILE_ID | Value: [ID của configuration profile] Click Save Lấy APP_ID: Vào AWS Console \u0026gt; AppConfig Click vào application MyFeatureFlagApp của chúng ta Trên URL của trình duyệt, bạn sẽ thấy một đoạn như:\u0026hellip;/applications/abc123def\u0026hellip; Đoạn abc123def\u0026hellip; chính là APP_ID Lấy ENV_ID: Trong application vừa vào Click tab Environments Click vào environment production Trên URL sẽ có dạng:\u0026hellip;/environments/xyz789\u0026hellip; Đoạn xyz789\u0026hellip; chính là ENV_ID Lấy PROFILE_ID: Trong cùng application Click tab Configuration profiles Click vào profile FeatureFlagDemo URL sẽ có dạng:\u0026hellip;/configurationprofiles/def456\u0026hellip; Đoạn def456\u0026hellip; chính là PROFILE_ID "
},
{
	"uri": "//localhost:1313/2-implementation-steps/",
	"title": "Chuẩn bị",
	"tags": [],
	"description": "",
	"content": "Nội dung:\nCài đặt các công cụ cần thiết Source code Cấu hình AWS IAM Tổng quan các bước triển khai ban đầu Quá trình triển khai hệ thống quản lý Feature Flag trên AWS bắt đầu với ba bước quan trọng:\n1. Cài đặt công cụ cần thiết Ở bước này, bạn sẽ tiến hành cài đặt các công cụ hỗ trợ phát triển và quản lý hạ tầng như AWS CLI, Node.js, Git, VS Code và các extension liên quan. Việc chuẩn bị đầy đủ công cụ giúp đảm bảo quá trình làm việc với AWS và source code diễn ra thuận lợi, nhất quán trên nhiều môi trường.\n2. Thiết lập mã nguồn Sau khi đã có đầy đủ công cụ, bạn sẽ tiến hành lấy mã nguồn dự án từ repository, cấu hình các biến môi trường, cài đặt các package cần thiết và kiểm tra lại cấu trúc thư mục. Bước này giúp đảm bảo môi trường phát triển đồng bộ, sẵn sàng cho các thao tác tiếp theo như build, deploy hoặc tích hợp với các dịch vụ AWS.\n3. Cấu hình AWS IAM Để đảm bảo an toàn và phân quyền hợp lý khi truy cập các dịch vụ AWS, bạn sẽ tạo và cấu hình các user, group, role và policy trong AWS IAM. Việc này giúp kiểm soát quyền truy cập, bảo vệ tài nguyên và tuân thủ các nguyên tắc bảo mật trong quá trình phát triển cũng như vận hành hệ thống.\nNhững bước chuẩn bị này là nền tảng quan trọng, giúp quá trình triển khai các dịch vụ AWS phía sau được diễn ra suôn sẻ, an toàn và hiệu quả.\n"
},
{
	"uri": "//localhost:1313/2-implementation-steps/2-set-up-source-code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": "Cấu hình AWS CLI Trong phần này, chúng ta sẽ cấu hình AWS CLI (Command Line Interface) để có thể tương tác với các dịch vụ AWS từ môi trường local. AWS CLI là công cụ dòng lệnh quan trọng giúp chúng ta quản lý các tài nguyên AWS một cách tự động và hiệu quả.\nTại sao cần cấu hình AWS CLI? AWS CLI cho phép chúng ta thực hiện nhiều thao tác với AWS mà không cần sử dụng giao diện đồ họa (AWS Management Console). Điều này đặc biệt hữu ích khi:\nTự động hóa quy trình triển khai Tích hợp với các pipeline CI/CD Quản lý tài nguyên theo hướng Infrastructure as Code (IaC) Thực hiện các tác vụ quản trị lặp đi lặp lại Chuẩn bị các thông tin cần thiết Trước khi cấu hình AWS CLI, chúng ta cần chuẩn bị các thông tin sau:\nAWS Access Key ID: Mã định danh cho người dùng AWS IAM AWS Secret Access Key: Khóa bí mật tương ứng với Access Key ID AWS Region: Khu vực AWS mà bạn muốn làm việc chủ yếu Output Format: Định dạng đầu ra cho kết quả từ AWS CLI (json, yaml, text, table) Để có được AWS Access Key ID và Secret Access Key, bạn cần:\nĐăng nhập vào AWS Management Console Truy cập vào dịch vụ IAM (Identity and Access Management) Chọn \u0026ldquo;Users\u0026rdquo; ở menu bên trái Chọn user của bạn (hoặc tạo user mới nếu chưa có) Chọn tab \u0026ldquo;Security credentials\u0026rdquo; Nhấp vào \u0026ldquo;Create access key\u0026rdquo; Lưu ý quan trọng: Secret Access Key sẽ chỉ được hiển thị một lần tại thời điểm tạo. Hãy đảm bảo lưu trữ nó ở nơi an toàn.\nCài đặt AWS CLI Nếu bạn chưa cài đặt AWS CLI, hãy làm theo hướng dẫn dưới đây:\nTrên Windows:\nTải xuống bộ cài đặt MSI từ trang chủ AWS CLI Chạy bộ cài đặt và làm theo các bước Kiểm tra cài đặt:\naws --version Kết quả sẽ hiển thị phiên bản AWS CLI, ví dụ: aws-cli/2.27.50 Python/3.13.4 Windows/11 exe/AMD64\nCấu hình AWS CLI cơ bản Để cấu hình AWS CLI, chúng ta sẽ sử dụng lệnh aws configure:\naws configure Hệ thống sẽ yêu cầu nhập các thông tin sau:\nAWS Access Key ID: Nhập Access Key ID của bạn AWS Secret Access Key: Nhập Secret Access Key của bạn Default region name: Nhập khu vực AWS (ví dụ: us-east-1, ap-southeast-1) Default output format: Nhập định dạng đầu ra mong muốn (json, yaml, text, table) Ví dụ:\nAWS Access Key ID [None]: \u0026#34;your_access_key_id\u0026#34;\rAWS Secret Access Key [None]: \u0026#34;your_secret_access_key\u0026#34;\rDefault region name [None]: us-east-1\rDefault output format [None]: json Clone project về máy Clone repository git clone https://github.com/ReiOzO/Project-FeatureFlagManagement.git cd Project-FeatureFlagManagement Backend setup cd backend npm install npm run setup-aws npm run dev Frontend setup cd frontend npm install npm start AWS configuration cd aws-config ./deploy-appconfig.sh ./setup-cloudwatch.sh "
},
{
	"uri": "//localhost:1313/3-configure-appconfig/2-create-environment/",
	"title": "Tạo Environment",
	"tags": [],
	"description": "",
	"content": " Trong application vừa tạo, chọn tab Environments.\nClick Create environment. Điền thông tin:\nName: production Description: Production-environment Click Create environment "
},
{
	"uri": "//localhost:1313/3-configure-appconfig/",
	"title": "AWS AppConfig",
	"tags": [],
	"description": "",
	"content": "Tổng quan ℹ️ Information: AWS AppConfig là một dịch vụ thuộc AWS Systems Manager giúp bạn triển khai, quản lý và kiểm soát các cấu hình động (dynamic configuration) cho ứng dụng một cách an toàn và linh hoạt. Một trong những ứng dụng phổ biến nhất của AppConfig là quản lý Feature Flag – cho phép bạn bật/tắt, kiểm soát tính năng mới mà không cần phải triển khai lại mã nguồn.\nMục đích sử dụng AWS AppConfig để quản lý Feature Flag Triển khai tính năng mới một cách an toàn:\nFeature Flag giúp bạn kiểm soát việc phát hành tính năng mới cho từng nhóm người dùng, giảm rủi ro khi triển khai và dễ dàng rollback nếu có sự cố.\nTăng tốc độ phát triển và thử nghiệm:\nCho phép đội ngũ phát triển thử nghiệm A/B, canary release hoặc gradual rollout mà không cần thay đổi mã nguồn hay tái khởi động dịch vụ.\nQuản lý cấu hình tập trung:\nTất cả các cấu hình và feature flag được quản lý tập trung, dễ dàng kiểm soát, theo dõi và cập nhật.\nĐảm bảo an toàn khi thay đổi:\nAppConfig hỗ trợ kiểm tra, xác thực cấu hình trước khi áp dụng, giúp giảm thiểu lỗi do cấu hình sai.\nLợi ích chính 💡 Pro Tip: Với AWS AppConfig, bạn có thể:\nBật/tắt tính năng theo thời gian thực mà không cần deploy lại ứng dụng Giảm thiểu rủi ro khi phát hành tính năng mới Dễ dàng rollback khi có sự cố Hỗ trợ kiểm thử, A/B testing, canary release hiệu quả Quản lý cấu hình động cho nhiều môi trường (dev, test, prod) một cách linh hoạt ⚠️ Warning: Nếu không sử dụng giải pháp quản lý feature flag chuyên nghiệp, việc bật/tắt tính năng hoặc thay đổi cấu hình có thể gây ra lỗi hệ thống, downtime hoặc trải nghiệm người dùng không nhất quán.\nNội dung Tạo Application Tạo Environment Tạo Configuration Tạo Deployment Strategy "
},
{
	"uri": "//localhost:1313/2-implementation-steps/3-configuration-aws-iam/",
	"title": "Cấu hình AWS IAM",
	"tags": [],
	"description": "",
	"content": "Cấu hình AWS IAM Trong phần này, chúng ta sẽ cấu hình AWS Identity and Access Management (IAM) để đảm bảo bảo mật cho hệ thống. IAM là dịch vụ quan trọng giúp quản lý quyền truy cập vào các tài nguyên AWS một cách an toàn.\nTổng quan về AWS IAM AWS IAM cho phép bạn:\nQuản lý người dùng, nhóm và vai trò Cấp phát quyền truy cập đến các tài nguyên AWS Thiết lập xác thực đa yếu tố (MFA) Thiết lập chính sách mật khẩu Phân tích quyền truy cập để đảm bảo tuân thủ nguyên tắc đặc quyền tối thiểu Tạo AWS Access Key ID và Secret Access Key Đăng nhập vào AWS Management Console Truy cập vào dịch vụ IAM (Identity and Access Management) Chọn \u0026ldquo;Users\u0026rdquo; ở menu bên trái Chọn user của bạn (hoặc tạo user mới nếu chưa có) Chọn tab \u0026ldquo;Security credentials\u0026rdquo; Nhấp vào \u0026ldquo;Create access key\u0026rdquo; Lưu lại \u0026ldquo;Access key\u0026rdquo; và \u0026ldquo;Secret access key\u0026rdquo; Tải xuống file .csv chứa access key (nếu cần) Nhấn \u0026ldquo;Done\u0026rdquo; để hoàn thành Lưu ý quan trọng: Secret Access Key sẽ chỉ được hiển thị một lần tại thời điểm tạo. Hãy đảm bảo lưu trữ nó ở nơi an toàn.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Quản lý Feature Flag với AWS AppConfig",
	"tags": [],
	"description": "",
	"content": "Tổng quát về dự án Feature Flag Management Dự án Feature Flag Management hướng tới việc xây dựng một hệ thống quản lý và kiểm soát việc phát hành các tính năng mới (feature flags) cho ứng dụng một cách an toàn, linh hoạt và tự động trên nền tảng AWS. Việc sử dụng feature flag giúp đội ngũ phát triển có thể bật/tắt, thử nghiệm, hoặc rollback các tính năng mà không cần triển khai lại toàn bộ ứng dụng, từ đó giảm thiểu rủi ro và tăng tốc độ đổi mới.\nHệ thống được thiết kế theo từng bước rõ ràng, tận dụng các dịch vụ chủ lực của AWS để đảm bảo tính tự động hóa, giám sát, an toàn và dễ dàng mở rộng. Dưới đây là các dịch vụ và bước thực hiện chính trong dự án:\n1. Giới thiệu Cung cấp tổng quan về mục tiêu, lợi ích của việc quản lý feature flag và lý do lựa chọn AWS làm nền tảng triển khai.\n2. Chuẩn bị Hướng dẫn chuẩn bị từng bước triển khai hệ thống quản lý feature flag trên AWS, từ khởi tạo tài nguyên đến cấu hình tự động hóa và giám sát.\n3. AWS AppConfig Sử dụng AWS AppConfig để quản lý, triển khai và kiểm soát các feature flag một cách tập trung và an toàn. Bao gồm các bước:\nTạo Application: Khởi tạo ứng dụng quản lý cấu hình. Tạo Environment: Xây dựng môi trường triển khai (dev, test, prod\u0026hellip;). Tạo Configuration: Định nghĩa và lưu trữ các feature flag. Tạo Deployment Strategy: Thiết lập chiến lược rollout (triển khai dần, canary, linear\u0026hellip;) để giảm thiểu rủi ro khi phát hành tính năng mới. 4. EventBridge Rule Thiết lập AWS EventBridge Rule để tự động phát hiện các sự kiện quan trọng (như lỗi, thay đổi trạng thái) và kích hoạt các quy trình xử lý tiếp theo, đảm bảo hệ thống luôn phản ứng kịp thời với các tình huống phát sinh.\n5. Lambda Sử dụng AWS Lambda để tự động hóa các tác vụ như rollback khi phát hiện sự cố:\nTạo Lambda Function cho Automated Rollback: Tự động khôi phục trạng thái an toàn khi có lỗi. Tạo Trigger cho Lambda Rollback: Kết nối Lambda với các sự kiện/alarms để tự động kích hoạt rollback. 6. AWS CloudWatch Tận dụng Amazon CloudWatch để giám sát, cảnh báo và trực quan hóa hoạt động của hệ thống:\nTạo CloudWatch Alarm: Thiết lập cảnh báo khi có dấu hiệu bất thường. Tạo CloudWatch Dashboard: Xây dựng bảng điều khiển trực quan để theo dõi các chỉ số quan trọng. 7. Dọn dẹp tài nguyên Hướng dẫn cách xóa hoặc dọn dẹp các tài nguyên AWS sau khi hoàn thành thử nghiệm hoặc triển khai, giúp tối ưu chi phí và đảm bảo môi trường sạch sẽ.\nMục tiêu Dự án này giúp bạn từng bước xây dựng một hệ thống quản lý feature flag hiện đại, tự động hóa và an toàn trên AWS. Việc kết hợp các dịch vụ như AppConfig, EventBridge, Lambda và CloudWatch không chỉ giúp kiểm soát việc phát hành tính năng mà còn đảm bảo hệ thống luôn được giám sát, phản ứng nhanh với sự cố và dễ dàng mở rộng trong tương lai.\n"
},
{
	"uri": "//localhost:1313/3-configure-appconfig/3-create-hosted-configuration-profile/",
	"title": "Tạo Configuration",
	"tags": [],
	"description": "",
	"content": "Tạo Hosted Configuration Profile (JSON chứa feature flags) Trong application, chọn tab Configuration profiles Click Create configuration profile Step 1: Select configuration type Configuration options: Freeform configuration Configuration profile name: FeatureFlagDemo Step 2: Specify configuration data Configuration definition: AWS AppConfig hosted configuration Content: JSON { \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;lastUpdated\u0026#34;: \u0026#34;2025-07-12T14:42:04.610Z\u0026#34;, \u0026#34;flags\u0026#34;: { \u0026#34;dark-mode\u0026#34;: { \u0026#34;enabled\u0026#34;: true, \u0026#34;rolloutPercentage\u0026#34;: 100, \u0026#34;targeting\u0026#34;: { \u0026#34;userGroups\u0026#34;: [], \u0026#34;userIds\u0026#34;: [] }, \u0026#34;variants\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;control\u0026#34;, \u0026#34;weight\u0026#34;: 50 }, { \u0026#34;name\u0026#34;: \u0026#34;treatment\u0026#34;, \u0026#34;weight\u0026#34;: 50 } ], \u0026#34;metadata\u0026#34;: { \u0026#34;description\u0026#34;: \u0026#34;Dark mode feature\u0026#34;, \u0026#34;owner\u0026#34;: \u0026#34;admin\u0026#34;, \u0026#34;createdAt\u0026#34;: \u0026#34;2025-07-12T00:00:00Z\u0026#34; } } } } Step 3: Specify configuration data Review and save. "
},
{
	"uri": "//localhost:1313/5-configure-lambda/3-create-trigger-for-lambda-rollback/",
	"title": "Tạo Trigger cho Lambda Rollback",
	"tags": [],
	"description": "",
	"content": "Tại sao phải tạo Trigger cho Lambda Rollback? Việc tạo Trigger cho Lambda Rollback giúp tự động phát hiện và xử lý sự cố khi triển khai ứng dụng thất bại. Trigger sẽ kích hoạt hàm Lambda để thực hiện rollback (khôi phục lại trạng thái an toàn trước đó), đảm bảo hệ thống luôn ổn định và giảm thiểu thời gian gián đoạn dịch vụ.\nBước 1: Vào Lambda Function Chọn function feature-flag-rollback đã tạo trước đó Trong tab Diagram, click vào nút \u0026quot;+ Add trigger\u0026quot; Bước 2: Chọn Trigger Type Trigger configuration: chọn EventBridge (CloudWatch Events) Existing rules: feature-flag-rollback-trigger Bước 3: Review và Create Review lại cấu hình Click Add để tạo trigger Test Trigger Vào CloudWatch → Alarms Chọn alarm AppConfig-GetHostedConfig-HighCallCount Chọn Action → Edit Giảm threshold xuống mức mà metric hiện tại chắc chắn vượt qua (ví dụ: nếu CallCount hiện tại là 10, đặt threshold là 3). Nhấn Update alarm. Đợi 1-2 phút, alarm sẽ chuyển sang trạng thái In alarm (màu đỏ). Vào Lambda → Function → feature-flag-rollback → Test Click \u0026ldquo;Test\u0026rdquo; Kiểm tra Lambda function logs để xem có được trigger không Chọn tab Monitor hoặc CloudWatch Logs để kiểm tra log mới xuất hiện với timestamp gần nhất. Nếu có log mới, nghĩa là Lambda đã được trigger tự động bởi Alarm thông qua EventBridge. Khôi phục lại threshold (nếu đã chỉnh): Sau khi test xong, nhớ chỉnh lại threshold về giá trị chuẩn để tránh cảnh báo giả. "
},
{
	"uri": "//localhost:1313/3-configure-appconfig/4-create-deployment-strategy/",
	"title": " Tạo Deployment Strategy",
	"tags": [],
	"description": "",
	"content": " Chọn tab Deployment strategies Click Create deployment strategy Điền thông tin:\nName: workshop-gradual-rollout Description: Gradual feature rollout strategy Deployment type: Linear Step percentage: 25% Deployment time: 2 minutes Bake time: 3 minutes Click Create deployment strategy\nDeploy Configuration Quay lại Configuration profile Click Start deployment Chọn:\nEnvironment: production Hosted configuration version: 1 Deployment strategy: workshop-gradual-rollout Click Start deployment\nDeployment sẽ diễn ra theo timeline (Lý thuyết) ⏰ 0 min: Deployment starts (0%) ⏰ 2 min: 25% users receive new feature flags ⏰ 4 min: 50% users receive new feature flags ⏰ 6 min: 75% users receive new feature flags ⏰ 8 min: 100% users receive new feature flags ⏰ 11 min: Bake time complete ✅ Deployment theo timeline thực tế "
},
{
	"uri": "//localhost:1313/4-configure-eventbridge-rule/",
	"title": "EventBridge Rule",
	"tags": [],
	"description": "",
	"content": "Tại sao cần tạo AWS EventBridge (CloudWatch Events)? AWS EventBridge (trước đây gọi là CloudWatch Events) là một dịch vụ giúp bạn xây dựng các ứng dụng theo hướng sự kiện (event-driven) bằng cách kết nối các nguồn sự kiện với các mục tiêu xử lý (targets) như Lambda, Step Functions, SNS, SQS, v.v. Việc tạo EventBridge mang lại nhiều lợi ích quan trọng:\nTự động hóa quy trình vận hành:\nEventBridge cho phép bạn tự động hóa các hành động dựa trên sự kiện xảy ra trong hệ thống AWS hoặc từ các ứng dụng SaaS bên ngoài. Ví dụ: tự động kích hoạt Lambda khi có cảnh báo CloudWatch, hoặc gửi thông báo khi có thay đổi trạng thái tài nguyên.\nPhản ứng nhanh với sự kiện:\nBạn có thể thiết lập các quy tắc (rules) để phát hiện và phản hồi ngay lập tức với các sự kiện quan trọng như lỗi hệ thống, thay đổi cấu hình, hoặc các hành động của người dùng.\nTích hợp linh hoạt giữa các dịch vụ:\nEventBridge giúp kết nối và tích hợp nhiều dịch vụ AWS lại với nhau mà không cần phải viết nhiều mã xử lý phức tạp. Điều này giúp hệ thống của bạn mở rộng dễ dàng và linh hoạt hơn.\nGiảm thiểu rủi ro và tăng tính ổn định:\nBằng cách tự động hóa các phản ứng với sự kiện, bạn có thể giảm thiểu thời gian phát hiện và xử lý sự cố, từ đó tăng tính ổn định và độ tin cậy cho hệ thống.\nTheo dõi và kiểm soát tốt hơn:\nEventBridge giúp bạn dễ dàng theo dõi các sự kiện quan trọng, ghi lại lịch sử sự kiện và kiểm soát các luồng công việc trong hệ thống.\nTóm lại:\nViệc tạo AWS EventBridge là cần thiết để xây dựng các hệ thống tự động, phản ứng nhanh với sự kiện, tối ưu hóa vận hành và nâng cao khả năng tích hợp giữa các dịch vụ AWS cũng như các ứng dụng bên ngoài. Dưới đây là các bước cơ bản để tạo 1 EventBridge Rule:\nBước 1: Truy cập AWS EventBridge (CloudWatch Events) Đăng nhập AWS Console Vào dịch vụ AWS EventBridge Bước 2: Tạo Rule mới Chọn Rules ở menu bên trái Nhấn Create rule Bước 3: Thiết lập Rule Name: feature-flag-rollback-trigger Description: Trigger rollback when AppConfig metrics exceed thresholds Event bus: default Rule type: Rule with an event pattern Bước 4: Chọn Event pattern Event pattern chọn Custom pattern (JSON editor) Dán JSON sau vào: { \u0026#34;source\u0026#34;: [\u0026#34;aws.cloudwatch\u0026#34;], \u0026#34;detail-type\u0026#34;: [\u0026#34;CloudWatch Alarm State Change\u0026#34;], \u0026#34;detail\u0026#34;: { \u0026#34;state\u0026#34;: { \u0026#34;value\u0026#34;: [\u0026#34;ALARM\u0026#34;] }, \u0026#34;alarmName\u0026#34;: [{ \u0026#34;prefix\u0026#34;: \u0026#34;AppConfig-\u0026#34; }, { \u0026#34;prefix\u0026#34;: \u0026#34;FeatureFlag-\u0026#34; }] } } Bước 5: Thêm Target Target type: AWS service Select a target: Lambda function Function: feature-flag-rollback Bước 6: Review \u0026amp; Create Kiểm tra lại thông tin. Nhấn Create rule Lưu ý: Rule này sẽ tự động trigger Lambda mỗi khi alarm có tên bắt đầu bằng AppConfig- hoặc FeatureFlag- chuyển sang trạng thái ALARM.\n"
},
{
	"uri": "//localhost:1313/5-configure-lambda/",
	"title": "Lambda",
	"tags": [],
	"description": "",
	"content": "Tổng quan ℹ️ Information: AWS Lambda là dịch vụ điện toán serverless cho phép bạn chạy mã mà không cần quản lý máy chủ. Trong quá trình triển khai ứng dụng hoặc cấu hình trên AWS, việc xảy ra lỗi hoặc sự cố là điều không thể tránh khỏi. Để đảm bảo hệ thống luôn ổn định và giảm thiểu thời gian gián đoạn, bạn nên thiết lập cơ chế Automated Rollback – tự động khôi phục về trạng thái an toàn trước đó khi phát hiện lỗi.\nMục đích sử dụng Lambda cho Automated Rollback Tự động hóa quá trình khôi phục:\nLambda giúp tự động thực hiện các bước rollback khi phát hiện sự cố, loại bỏ thao tác thủ công, giảm thiểu rủi ro do con người gây ra.\nPhản ứng nhanh với lỗi:\nKhi có cảnh báo hoặc sự kiện bất thường (ví dụ: CloudWatch Alarm phát hiện lỗi), Lambda sẽ được kích hoạt (Trigger) để xử lý rollback ngay lập tức, giúp hệ thống nhanh chóng trở lại trạng thái ổn định.\nTăng tính ổn định và tin cậy cho hệ thống:\nViệc tự động rollback giúp giảm thời gian ngừng dịch vụ, đảm bảo trải nghiệm người dùng và duy trì hoạt động kinh doanh liên tục.\nTại sao cần tạo Trigger cho Lambda Rollback? Kích hoạt tự động:\nTrigger (thường là CloudWatch Alarm, EventBridge Rule, v.v.) giúp Lambda được gọi tự động khi có sự kiện hoặc điều kiện nhất định xảy ra, đảm bảo quá trình rollback diễn ra kịp thời mà không cần can thiệp thủ công.\nGiám sát và phản ứng chủ động:\nTrigger giúp hệ thống chủ động phát hiện và xử lý sự cố, giảm thiểu thiệt hại và rủi ro cho ứng dụng.\nLưu ý: Việc kết hợp Lambda Function với Trigger là giải pháp hiệu quả để tự động hóa quy trình rollback, nâng cao độ tin cậy và an toàn cho hệ thống AWS của bạn.\nNội dung Tạo Lambda Function Cấu hình Environment variables Tạo Trigger cho Lambda "
},
{
	"uri": "//localhost:1313/6-configure-cloudwatch/",
	"title": "AWS Cloudwatch",
	"tags": [],
	"description": "",
	"content": "Tổng quan ℹ️ Information: Amazon CloudWatch là dịch vụ theo dõi và quản lý cung cấp dữ liệu và thông tin định hướng hành động cho tài nguyên cơ sở hạ tầng và ứng dụng AWS, ứng dụng hybrid cũng như ứng dụng on-premises. Bạn có thể thu thập và truy cập tất cả dữ liệu về hiệu năng và hoạt động dưới hình thức logs và metrics trong cùng một nền tảng, thay vì theo dõi riêng lẻ (máy chủ, mạng hoặc cơ sở dữ liệu). CloudWatch cho phép bạn theo dõi end-to-end (ứng dụng, cơ sở hạ tầng và dịch vụ) và tận dụng cảnh báo, logs và dữ liệu sự kiện để tự động hóa các hành động và giảm Mean Time To Resolution (MTTR). Dịch vụ này giúp bạn giải phóng tài nguyên quan trọng và tập trung vào việc xây dựng các ứng dụng và giá trị kinh doanh.\nTính năng chính CloudWatch cung cấp thông tin định hướng hành động, hỗ trợ việc tối ưu hóa hiệu năng ứng dụng, quản lý sử dụng tài nguyên và hiểu rõ tình trạng hoạt động của toàn hệ thống. CloudWatch hiển thị dữ liệu metrics và logs chi tiết đến từng giây, lưu trữ dữ liệu trong 15 tháng (đối với metrics) và cho phép thực hiện các phép tính trên metrics.\n💡 Pro Tip: Dịch vụ này cũng giúp bạn phân tích dữ liệu trên dữ liệu lịch sử nhằm tối ưu hóa chi phí và thu thập thông tin real-time để tối ưu hóa ứng dụng và tài nguyên cơ sở hạ tầng.\nLợi ích chính 💡 Pro Tip: Với Amazon CloudWatch, bạn có thể:\nGiám sát toàn diện các tài nguyên AWS và ứng dụng của bạn Thiết lập cảnh báo thông minh dựa trên ngưỡng tùy chỉnh Tự động hóa phản hồi đối với các sự cố hoạt động Tạo bảng điều khiển trực quan để theo dõi hiệu suất Phân tích logs để khắc phục sự cố nhanh chóng ⚠️ Warning: Việc không thiết lập giám sát đầy đủ có thể dẫn đến thời gian ngừng hoạt động không lường trước, hiệu suất kém và chi phí cao hơn do sử dụng tài nguyên không hiệu quả.\nNội dung Tạo CloudWatch Alarm Tạo CloudWatch Dashboard "
},
{
	"uri": "//localhost:1313/7-resource-cleanup/",
	"title": "Dọn dẹp tài nguyên",
	"tags": [],
	"description": "",
	"content": "ℹ️ Information: Sau khi hoàn thành workshop, việc dọn dẹp tài nguyên là bước quan trọng để tránh phát sinh chi phí không cần thiết.\n1. Dọn dẹp tài nguyên AWS AppConfig Xoá Environment Trên thanh tìm kiếm dịch vụ AWS: Nhập AWS AppConfig. Chọn AWS AppConfig. Trong AWS AppConfig: Chọn Applications \u0026gt; MyFeatureFlagApp. Chọn Environments Ấn chọn Delete environment, xác nhận Delete. Xoá Configuration Profiles and Feature Flags Trong AWS AppConfig:\nChọn Applications \u0026gt; MyFeatureFlagApp \u0026gt; FeatureFlagDemo. Ấn chọn Delete version, xác nhận Delete. Sau khi xoá version, chọn Action \u0026gt; Delete configuration profile. Xoá Applications Trong AWS AppConfig:\nChọn Applications \u0026gt; MyFeatureFlagApp. Ấn chọn Delete, xác nhận Delete. Xoá Deployment strategies Trong AWS AppConfig:\nChọn Deployment strategies \u0026gt; workshop-gradual-rollout. Ấn chọn Delete, xác nhận Delete. 2. Dọn dẹp tài nguyên AWS Cloudwatch Xoá Alarms Trên thanh tìm kiếm dịch vụ AWS:\nNhập CloudWatch. Chọn CloudWatch. Trong AWS CloudWatch:\nChọn CloudWatch \u0026gt; Alarms. Chọn AppConfig-GetHostedConfig-HighCallCount \u0026gt; Actions \u0026gt; Delete. Xác nhận Delete. Xoá Dashboards Trong AWS CloudWatch:\nChọn CloudWatch \u0026gt; Dashboards. Chọn FeatureFlags-Monitoring \u0026gt; Delete. Xác nhận Delete. Xoá Topics Trên thanh tìm kiếm dịch vụ AWS: Nhập SNS. Chọn Simple Notification Service. Trong Amazon SNS: Vào Topics. Chọn Default_CloudWatch_Alarms_Topic \u0026gt; Delete. Nhập delete me, xác nhận Delete. Xoá Log groups Trong AWS CloudWatch:\nChọn CloudWatch \u0026gt; Log groups. Chọn /aws/lambda/feature-flag-rollback \u0026gt; Actions \u0026gt; Delete log group(s). Xác nhận Delete. ⚠️ CloudWatch Metrics và Logs sẽ vẫn tồn tại trong hệ thống AWS của bạn tối đa 15 tháng theo chính sách lưu trữ mặc định.\n3. Dọn dẹp tài nguyên AWS Lambda Xoá Triggers Trên thanh tìm kiếm dịch vụ AWS:\nNhập Lambda. Chọn Lambda. Trong AWS Lambda:\nChọn Functions \u0026gt; feature-flag-rollback \u0026gt; Configuration. Chọn EventBridge (CloudWatch Events): feature-flag-rollback-trigger Ấn chọn Delete, xác nhận Delete. Xoá Lambda function Trong AWS Lambda:\nChọn Functions \u0026gt; feature-flag-rollback \u0026gt; Actions \u0026gt; Delete. Nhập confirm, xác nhận Delete. Xoá CloudWatch Events Rule Trên thanh tìm kiếm dịch vụ AWS: Nhập EventBridge. Chọn Amazon EventBridge. Trong Amazon EventBridge: Chọn Rules. Chọn feature-flag-rollback-trigger \u0026gt; Delete. Nhập delete, xác nhận Delete. 🔒 Security Note: Việc dọn dẹp tài nguyên không chỉ giúp tiết kiệm chi phí mà còn là biện pháp bảo mật tốt, giảm thiểu bề mặt tấn công tiềm ẩn trong môi trường AWS của bạn.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]